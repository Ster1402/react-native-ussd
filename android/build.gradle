// android/build.gradle

def DEFAULT_COMPILE_SDK_VERSION = 33
def DEFAULT_MIN_SDK_VERSION = 21
def DEFAULT_TARGET_SDK_VERSION = 33

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

configurations {
    customConfig {
        extendsFrom implementation
        canBeResolved = true
        attributes {
            attribute (com.android.build.api.attributes.BuildTypeAttr.ATTRIBUTE, objects.named (com.android.build.api.attributes.BuildTypeAttr, 'debug'))
        }
    }
}


buildscript {
    if (project == rootProject) {
        repositories {
            google()
            jcenter()
        }
        dependencies {
            classpath 'com.android.tools.build:gradle:3.4.1'
        }
    }
}

android {
    compileSdkVersion DEFAULT_COMPILE_SDK_VERSION
    defaultConfig {
        minSdkVersion DEFAULT_MIN_SDK_VERSION
        targetSdkVersion DEFAULT_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
    }
    lintOptions {
        abortOnError false
    }
}

repositories {
    mavenLocal()
    maven {
        url "$rootDir/../node_modules/react-native/android"
    }
    maven {
        url "$rootDir/../node_modules/jsc-android/dist"
    }
    google()
    jcenter()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.facebook.react:react-native:0.72.3' // change this to match your react-native version
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
}

def configureReactNativePom(def pom) {
    def packageJson = new groovy.json.JsonSlurper().parseText(file('../package.json').text)
    pom.project {
        name packageJson.title
        artifactId packageJson.name
        version = packageJson.version
        group = "com.isharaux.ussd"
        description packageJson.description
        url packageJson.repository.baseUrl
        licenses {
            license {
                name packageJson.license
                url packageJson.repository.baseUrl + '/blob/master/' + packageJson.licenseFilename
                distribution 'repo'
            }
        }
        developers {
            developer {
                id packageJson.author.username
                name packageJson.author.name
            }
        }
    }
}

afterEvaluate { project ->
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += files(android.bootClasspath)
        classpath += files(project.getConfigurations().getByName('customConfig').asList())
        include '**/*.java'
    }
    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        archiveClassifier = 'javadoc' // use archiveClassifier instead of classifier
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from android.sourceSets.main.java.srcDirs
        include '**/*.java'
    }
    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        def javaCompileTask = variant.javaCompileProvider.get()
        task "jar${name}"(type: Jar, dependsOn: javaCompileTask) {
            from javaCompileTask.destinationDir
        }
    }
    artifacts {
        archives androidSourcesJar
        archives androidJavadocJar
    }

    task installArchives(type: Upload) {
        configuration = configurations.archives
        repositories {
            maven {
                url = "file://${projectDir}/../android/maven"
                pom.project {
                    configureReactNativePom pom
                }
            }
        }
    }

}
